use Skilaverkefni_1;
delimiter $$
drop procedure if exists CourseList $$

create procedure CourseList()
begin
	select courseName from Courses;
end $$
delimiter ;

call CourseList();

delimiter $$
drop procedure if exists SingleCourse $$

create procedure SingleCourse()
begin
	select * from Courses where courseName = ("Stærðfræði Algebra");
end $$
delimiter ;

call SingleCourse();
 --?? veit ekki hvað ég á að setja herna

delimiter $$
drop procedure if exists NewCourse $$

create procedure NewCourse(in courseNumer char(10),courseNafn varchar(75),courseStig int)
begin
	insert into courses(courseNumber,courseName,courseCredits)
    values (courseNumer,courseNafn,courseStig);
    
end $$
delimiter ;

call NewCourse('GAGN2HS05BU', 'læra MySQL',5);

delimiter $$
drop procedure if exists UpdateCourse $$

create procedure UpdateCourse(in CNumer char(10),CNafn varchar(75),CStig int)
begin
	  update courses
      set courseName = CNafn,courseCredits = CStig
      where courseNumber = CNumer;
end $$
delimiter ;

call UpdateCourse();
delimiter $$
drop procedure if exists DeleteCourse $$

 --hér er kóðinn í einhverjum vandræðum

create procedure DeleteCourse(in CuNumer char(10))
begin
	  delete from courses where courseNumber = CuNumer;
end $$
delimiter ;

call DeleteCourse();
delimiter $$
drop function if exists NumberOfCourses $$
    
create function NumberOfCourses()
returns int
no sql
begin
	return(
	select count(courseNumber)
    from courses);
end $$
delimiter ;
select NumberOfCourses();

delimiter $$
drop function if exists TotalTrackCredits $$
    
create function TotalTrackCredits(braut int)
returns int
no sql
begin
	-- Join track to trackcourse og Join trackcourse to courses nota inner join
    return(
    select sum(courseCredits) 
    from Tracks
		inner join TrackCourses on Tracks.trackID = TrackCourses.trackID
		inner join Courses on TrackCourses.courseNumber = Courses.courseNumber
    where Tracks.trackID = braut
    );
end $$
delimiter ;

select TotalTrackCredits(9);
delimiter $$
drop function if exists TotalNumberOfTrackCourses $$
    
create function TotalNumberOfTrackCourses(braut2 int)
returns int
no sql
begin
	return(
		select count(braut2)
		from Tracks
			inner join TrackCourses on Tracks.trackID = TrackCourses.trackID
			inner join Courses on TrackCourses.courseNumber = Courses.courseNumber
		where TrackCourses.trackID = braut2
    );
end $$
delimiter ;

select TotalNumberOfTrackCourses(9)
delimiter $$
drop function if exists CourseInUse $$
    
create function CourseInUse(CouNumber char(10))
returns boolean
no sql
begin
	return(
		if (
        (select count(courseNumber) from TrackCourses where courseNumber = CouNumber),true,false)
    );
end $$
delimiter ;

select CourseInUse()

 --Þessi partur veldur líka vandræðum, veit ekki afhverju
delimiter $$
drop function if exists IsLeapyear $$

create function IsLeapYear(ar int)
returns boolean
no sql
begin
	case
		when ar % 400 = 0 then return(true);
        when ar % 100 = 0 then return(false);
        when ar % 4 = 0 then return(true);
        else return(false);
    end case;
end $$
delimiter ;
select IsLeapYear(2011);

delimiter $$
drop function if exists StudentAge $$
    
create function StudentAge(nemandaID int)
returns int
no sql
begin
	return(
		Year(current_date) - year((select dob from Students where studentID = nemandaID))
    );
end $$
delimiter ;
select StudentAge(2);

delimiter $$
drop function if exists StudentCredits $$
    
create function StudentCredits()
returns int
no sql
begin
	return(
		join Registration on Courses 
    );
end $$
delimiter ;
select studentID,registrationDate,sum(courseCredits)
from Registration
	NATURAL JOIN Courses
where studentID = 1 and passed = 1;

delimiter $$
drop procedure if exists CourseRestrictorList $$

create procedure CourseRestrictorList()
begin
	SELECT courses.courseNumber, courses.courseName, courses.courseCredits, Restrictors.courseNumber, Restrictors.restrictorID, Restrictors.restrictorType
    FROM courses
    LEFT outer JOIN Restrictors ON courses.courseNumber = Restrictors.courseNumber;
end $$
delimiter ;
call CourseRestrictorList();

drop procedure if exists RestrictorList $$

create procedure RestrictorList()
begin
	SELECT *
    FROM courses
    LEFT outer JOIN Restrictors ON courses.courseNumber = Restrictors.courseNumber;
end $$
delimiter ;
call RestrictorList();
